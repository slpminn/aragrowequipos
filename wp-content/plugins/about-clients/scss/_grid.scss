@use "sass:math";

$grid-columns: 16;

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;           //0 top and botton, auto left and right.  That is what it centers the content.
  padding: 0 20px;          //0 top and botton, 20px left and right.
  box-sizing: border-box;   //Padding and Border are incorporated in the total width.
}
.row {
  display: flex;            //sets how a flex item will grow or shrink to fit the space available in its flex container
  flex-flow: row wrap;      //If the screen get too small is going to wrap columns to the next row.
}
.col {
    box-sizing: border-box;
    flex-grow: 0;
    width: 100%;
}  
// col classes
@include xs { 
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;                             //So it does not grows.
      width: math.div($i * 100%, $grid-columns);//Calculate the width
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns  {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}